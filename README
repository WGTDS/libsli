#####################################################################

    Lib SLI v1.00

    "White Guy That Don't Smile"
    2021/11/27, Saturday, November 27th; 1140 HOURS

#####################################################################

Preface:

    From: "n64sdk/nintendo/n64kit/misc/slide_v1.1"

    Encoding functionality was recovered from a decompiled
    executable by the name of "sliencw11.exe" using a reverse
    software engineering suite, "Ghidra", and an x86 decompiler,
    "Snowman".

    Decoding functionality was transcribed from the "slidec.s"
    assembler source.

    Both instances correspond with the "Yay0" format -
    an extension founded upon the limited predecessor,
    and have been adapted to support the "MIO0", "SMSR00",
    and "Yaz0" formats.

    Further examinations were conducted via decompiling various
    N64 ROMs to verify decoding routines, and a lone Mario Kart 64
    ROM to cross reference the "MIO0" encoding routine.

    These algorithmic variations have been tested against a laundry
    list of Nintendo software titles to verify accuracy between
    decoding and re-encoding tens of thousands of data segments on
    the Nintendo 64, Nintendo Gamecube, and Nintendo 3DS.
    However!
    There are instances of LZ encoded data out in the wild that use
    SLI headers (some prefixed by a 16 byte GZIP header), but were
    most likely encoded using a different Lempel-Ziv algorithm and
    not the engineered solution by "Melody-Yoshi".
_____________________________________________________________________
    Further information was gathered from the "Giga Leak" which
    contained samples of both encoding and decoding routines
    written in assembly language.

    From: "bbgames-noncvs/tools/compress"

    Concerning "Giga Leak", it should be noted that there is a
    source file called "sliutil.c" that contains solutions for
    processing MIO0, Yay0, and Yaz0 data.

    While this source code was observed during the research
    process, its properties weren't attributed to the construction
    of this library due to the desire of maintaining a 1:1 ratio
    consistency for reproducing preexisting SLI data.

#####################################################################

Description:

    This is a small library for processing Nintendo's SLI format.
    It handles the "MIO0", "CMPR"/"SMSR00", "Yay0", and "Yaz0"
    variations present within numerous Nintendo 64 titles.

#####################################################################

Instructions:

    I used GCC to build this on 64-bit Linux, Mac, and Windows,
    and have provided a Makefile that may serve as a convenience.

Ensure the following subdirectories exist within the path "libsli":
"bin"
"include"
"lib"
"obj"
"src"
_____________________________________________________________________
Confirm the following files are present within these subdirectories:
"libsli"
    "include"
        "libsli.h"
    "src"
        "dszpmio.c"
        "dszpsmsr.c"
        "dszpyay.c"
        "dszsyaz.c"
        "eszpmio.c"
        "eszpsmsr.c"
        "eszpyay.c"
        "eszsyaz.c"
        "lzsz.c"
        "process.c"
        "search.c"
        "utils.c'
    "LICENSE"
    "Makefile"
    "README"
_____________________________________________________________________
"cd" into the work directory that is "libsli" and type "make".

The "make" command will build "libsli.a" and "lzsz".

The "make lib/libsli.a" command will build the static library.

The "make bin/lzsz" command will build a standalone executable that
utilizes the static library "libsli.a", therefore, said library must
exist beforehand.

The "make clean" command will remove all files from the
"bin", "lib", and "obj" subdirectories.
_____________________________________________________________________

Interface:

"libsli.h" is required! Inspect its contents.

"dsz_____.c" files are the decoding routines for SLI encoded data.

"esz_____.c" files are the encoding routines for generating SLI data.

"process.c" serves as a general interface that processes arguments
to either encode or decode SLI data.

"search.c" contains the required search routine shared between the
encoding functions for MIO0, SMSR00, Yay0, and Yaz0.

"utils.c" contain byte-swapping functions for 16 and 32-bit data.
It should be noted that SLI data is big-endian, therefore, the
facilities provided regard little-endian host systems.

"lzsz.c" contains a "main()" function and will compile into an
executable granted the library has been compiled beforehand.

#####################################################################

Motives:

    1.) The official SDK tool, "sliencw11.exe", is terribly slow,
        therefore, a solution to this problem was in order.
        Decompilation and recompilation using -O3 optimization,
        in addition to, a few modifications improved compression
        time lapses by over 3-times the original rate.

    2.) Curiosity. The SLI format has been in numerous binaries
        from Nintendo and other partnered developers for decades.
        It's difficult to acknowledge this fact and not ask "why?".

    3.) To provide the community a means to toy around with
        miscellaneous projects by being able to leisurely
        (de)compress SLI data.

    4.) Research.

    5.) Preservation of a historical software artifact.

#####################################################################

Special Mentions:

    Nintendo EAD & "Melody-Yoshi":
        For doing something neat with the Lempel-Ziv compression
        algorithm while simultaneously leaving the community
        scratching their heads as to what the acronym "SLI" even
        means for over a quarter of a century.

    My Feet:
        For constantly falling asleep while I'm on the toilet.
        Thanks.

#####################################################################
